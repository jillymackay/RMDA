---
title: "Week 3: Introduction to Analyses"
format: html
editor: source
execute: 
  eval: FALSE
  echo: TRUE
  warning: FALSE
  message: FALSE
  freeze: TRUE
---

```{r, "Week 3 Set Up"}
#| eval: TRUE
#| echo: FALSE
#| warning: FALSE
#| message: FALSE


library(tidyverse)
library(easystats)
library(effsize)
library(rstan)
library(rstanarm)

cat_weights <- tibble(avg_daily_snacks  = c(3, 2, 4, 2, 3, 1, 1, 0, 1, 0, 2, 3, 1, 2, 1, 3),
                      weight = c(3.8, 3.9, 5, 3.7,  4.1, 3.6, 3.7, 3.6, 3.8, 4.1, 4.3, 3.9, 3.7, 3.8, 3.5, 4.3),
                      environ = c("Indoor", "Indoor", "Outdoor", "Indoor",
                                  "Outdoor", "Indoor", "Outdoor", "Indoor",
                                  "Indoor", "Indoor", "Outdoor", "Indoor",
                                  "Outdoor", "Indoor", "Indoor", "Outdoor"))


resid <- tibble(x = c(1, 2, 3),
                y = c(3, 2, 6))
```



# Lecture 2: Introduction to statistics {.unnumbered}

## Set up your environment and packages {.unnumbered}

```{r, echo = TRUE, eval = FALSE}
library(tidyverse)
library(easystats)
library(rstan)
library(rstanarm)

cat_weights <- tibble(avg_daily_snacks  = c(3, 2, 4, 2, 3, 1, 1, 0, 1, 0, 2, 3, 1, 2, 1, 3),
                      weight = c(3.8, 3.9, 5, 3.7,  4.1, 3.6, 3.7, 3.6, 3.8, 4.1, 4.3, 3.9, 3.7, 3.8, 3.5, 4.3),
                      environ = c("Indoor", "Indoor", "Outdoor", "Indoor",
                                  "Outdoor", "Indoor", "Outdoor", "Indoor",
                                  "Indoor", "Indoor", "Outdoor", "Indoor",
                                  "Outdoor", "Indoor", "Indoor", "Outdoor"))

```


### Summarise example data {.unnumbered}

```{r, eval = TRUE}

cat_weights |> 
  summarise("Mean Weight (kg)" = mean(weight),
            "SD Weight (kg)" = sd(weight),
            "Mean Daily Snacks" = mean (avg_daily_snacks),
            )

```


### Visualise example data {.unnumbered}


```{r}
#| eval: true


cat_weights |> 
  ggplot(aes(x = avg_daily_snacks, y = weight)) +
  geom_point() +
  labs(x = "Average Daily Snacks", y = "Cat Weight") +
  theme_classic() +
  scale_y_continuous(limits = c(0,5))



```


### A Linear Model {.unnumbered}

```{r}
#| eval: true

model_fcat <- lm(weight ~ avg_daily_snacks, data = cat_weights)
summary(model_fcat)
report::report(model_fcat)
parameters(model_fcat) 
plot(model_parameters(model_fcat), show_intercept = TRUE)
plot(model_parameters(model_fcat))

cat_weights |> 
  ggplot(aes(x = avg_daily_snacks, y = weight)) +
  geom_point() +
  labs(x = "Average Daily Snacks", y = "Cat Weight",
       caption = "Weight ~ Average Daily Snacks shown") +
  theme_classic() +
  scale_y_continuous(limits = c(0,5)) +
  geom_abline(slope = 0.20, intercept = 3.55)


```


### A Bayesian Model {.unnumbered}

```{r}
#| eval: true
#| warning: false
#| message: false
#| 
set.seed(10)

model_bcat <- stan_glm(weight ~ avg_daily_snacks, data = cat_weights)
summary(model_bcat)
describe_posterior(model_bcat)
report::report(model_bcat)

posteriors <- get_parameters(model_bcat)

posteriors |> 
  ggplot(aes(x = avg_daily_snacks)) +
  geom_density(fill = "lightblue") +
  theme_classic() +
  labs(x = "Posterior Coefficient Estimates for Average Daily Snacks",
       y = "Density",
       caption = "Median Estimate Shown") +
  geom_vline(xintercept = 0.21, color = "darkblue", linewidth = 1)




```



### A Linear model with a factor {.unnumbered}


```{r}
#| echo: true
#| eval: true

model_fcat2 <- lm(weight ~ avg_daily_snacks + environ, data = cat_weights)
summary(model_fcat2)
report::report(model_fcat2)
parameters(model_fcat2)
plot(model_parameters(model_fcat2), show_intercept = TRUE)
plot(model_parameters(model_fcat2))


cat_weights |> 
  ggplot(aes(x = avg_daily_snacks, y = weight, colour = environ)) +
  geom_point() +
  labs(x = "Average Daily Snacks", y = "Cat Weight",
       caption = "Weight ~ Average Daily Snacks shown") +
  theme_classic() +
  scale_y_continuous(limits = c(0,5)) +
  geom_smooth()

```



### Bayesian Framework {.unnumbered}


```{r}
#| echo: true
#| eval: true

model_bcat2 <- stan_glm(weight ~ avg_daily_snacks + environ, data = cat_weights)
summary(model_bcat2)
describe_posterior(model_bcat2) 
report::report(model_bcat2)

posteriors2 <- get_parameters(model_bcat2)


posteriors2 |> 
  pivot_longer(cols = c(avg_daily_snacks, environOutdoor),
               names_to = "Parameter",
               values_to="estimate") |> 
  ggplot() +
  geom_density(aes(x = estimate, fill = Parameter)) +
  theme_classic() +
  labs(x = "Posterior Coefficient Estimates",
       y = "Density") +
  facet_wrap(facets = ~Parameter, ncol = 1) +
  theme(legend.position = "none")


```


# Lecture: Calculating variance {.unnumbered}


## Why does it matter? {.unnumbered}


```{r}
#| eval: true
#| echo: true


vardat <- tibble(cat = c(13, 17, 30, 36, 11, 43, 23, 50, 19, 23),
                 dog = c(30, 31, 45, 43, 48, 50, 37, 32, 40, 44))



vardat |> 
  pivot_longer(cols = c(cat, dog),
               names_to = "Species",
               values_to = "Score") |> 
  ggplot(aes(x = Species)) +
  geom_point(aes(y = Score, colour = Species), position = position_jitter(width = .13), size = 1) +
  see::geom_violinhalf(aes(y = Score, fill = Species), linetype = "dashed", position = position_nudge(x = .2)) +
  geom_boxplot(aes(y = Score, alpha = 0.3, colour = Species), position = position_nudge(x = -.1), width = 0.1, outlier.shape = NA) +
  theme_classic() +
  labs(x = "Species", y = "Score") +
  theme(legend.position = "none") +
  coord_flip()

```


## Residuals {.unnumbered}

```{r}
#| eval: false
#| echo: true

resid <- tibble(x = c(1, 2, 3),
                y = c(3, 2, 6))

resid |> 
  ggplot(aes(x, y)) +
  geom_point(size = 4, colour = "lightblue") +
  theme_classic() +
  geom_hline(yintercept = 3.67) +
  labs(title = "Plot of 3 points, mean of y shown") +
  theme(axis.text.x=element_blank(),
        axis.ticks.x=element_blank(),
        axis.title.x = element_blank())


```

```{r}
#| eval: true
#| echo: false


resid |> 
  ggplot(aes(x, y)) +
  geom_point(size = 4, colour = "lightblue") +
  theme_classic() +
  geom_hline(yintercept = 3.67) +
  labs(title = "Plot of 3 points, mean of y shown") +
  theme(axis.text.x=element_blank(),
        axis.ticks.x=element_blank(),
        axis.title.x = element_blank())

```


## Adding the residuals {.unnumbered}

```{r}
#| echo: true
#| eval: true

resid |> 
  ggplot(aes(x, y)) +
  geom_point(size = 4, colour = "lightblue") +
  theme_classic() +
  geom_hline(yintercept = 3.67) +
  geom_segment(aes(x = 1, y = 3.67, xend = 1, yend = 3)) +
  geom_segment(aes(x = 2, y = 3.67, xend = 2, yend = 2)) +
  geom_segment(aes(x = 3, y = 3.67, xend = 3, yend = 6)) +
  labs(title = "Plot of 3 points, mean of y shown, residuals shown") +
  theme(axis.text.x=element_blank(),
        axis.ticks.x=element_blank(),
        axis.title.x = element_blank())


```

## Compare Variances {.unnumbered}

```{r}
#| echo: true
#| eval: true


vardat |> 
  summarise(var_dogs = var(dog),
            var_cat = var(cat))

```



## Compare Standard Deviations {.unnumbered}

```{r}
#| echo: true
#| eval: true


vardat |> 
  summarise(sd_dogs = sd(dog),
            sd_cat = sd(cat))

```



## Compare Standard Errors {.unnumbered}

```{r}
#| echo: true
#| eval: true

std.error <- function(x) sd(x)/sqrt(length(x))

vardat |> 
  summarise(se_dogs = std.error(dog),
            se_cat = std.error(cat))

```




#  Lecture: Meta Analyses {.unnumbered}

Calculate rs from R2

```{r}

sqrt(0.11)


```

