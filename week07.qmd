---
title: "Week 7: Analysing Quantitative Data"
format: html
editor: source
execute: 
  eval: FALSE
  echo: TRUE
  warning: FALSE
  message: FALSE
---





# Lecture 1: Partitioning Variation {.unnumbered}

```{r}
#| eval: TRUE


library(tidyverse)


examples <- tibble (x.perfect = c(1,2,3,4,5,6,7,8,9,10), 
                    y.perfect = c(1,2,3,4,5,6,7,8,9,10), 
                    x.realistic = c(1,2,3,4,4,6,8,8,9,11), 
                    y.realistic = c(2, 2, 4, 5, 5, 5, 7, 8, 9, 9))

```


## A Perfect World {.unnumbered}

```{r}
#| eval: true

examples |> 
  ggplot (aes(x = x.perfect, y = y.perfect))+
  geom_point (shape = 8) +
  scale_y_continuous(limits =c(0,10)) +
  scale_x_continuous(limits = c(0,10)) +
  labs (title = "100% of the variation in y is explained by x",
        x = "A Perfect Explanatory Variable",
        y = "A Perfect Response Variable") +
  theme_classic()

```

## Our Unicorn Farm {.unnumbered}

```{r}
#| eval: true

unicorns <- tibble (NoRadio = c(150, 130, 121, 90, 98, 100, 98, 100, 113, 111),
                 RadioMusic = c(112, 127, 132, 150, 112, 128, 110, 120, 98, 107),
                 RadioDiscussion = c(75, 98, 88, 83, 83, 77, 75, 84, 93, 99)) |> 
  pivot_longer(cols = c(NoRadio:RadioDiscussion),
               names_to = "Radio",
               values_to = "DustYield")


unicorns |> 
  ggplot (aes (x = Radio, y = DustYield)) + 
  geom_point(aes(shape = Radio, colour = Radio),  position = position_jitter(width = .13)) +
  labs (y = "Dust Yield (Kg)", x = "Radio Condition") +
  scale_color_brewer(palette = "Accent") +
  scale_y_continuous(limits = c(0, 200)) +
  theme_classic () +
  theme(legend.position = "none") 

```


## No Radio Group .{unnumbered}

```{r}
#| eval: true


unicorns |>
  filter(Radio == "NoRadio") |> 
  mutate(UnicornNo = c(1,2,3,4,5,6,7,8,9,10)) |> 
  # The mutate function adds a new variable just to plot this one specific chart
  # And then we pipe it directly into ggplot, so we're not changing the unicorns data
  # Remember you can check this with `View(unicorns)`, you'll see 'UnicornNo' doesn't exist.
  ggplot (aes (x = UnicornNo, y = DustYield)) + 
  geom_point() +
  labs (y = "Dust Yield (Kg)", x = "Unicorn No") +
  scale_y_continuous(limits = c(0, 200)) +
  scale_x_continuous(breaks = c(0, 2, 4, 6, 8, 10)) + 
  theme_classic ()


```

## No Radio Mean .{unnumbered}


```{r}
#| eval: true


unicorns |>
  group_by(Radio) |>
  filter(Radio == "NoRadio") |>
  summarise(mean = mean(DustYield))


unicorns |>
  filter(Radio == "NoRadio") |> 
  mutate(UnicornNo = c(1,2,3,4,5,6,7,8,9,10)) |> 
  # The mutate function adds a new variable just to plot this one specific chart
  # And then we pipe it directly into ggplot, so we're not changing the unicorns data
  # Remember you can check this with `View(unicorns)`, you'll see 'UnicornNo' doesn't exist.
  ggplot (aes (x = UnicornNo, y = DustYield)) + 
  geom_point() +
  geom_hline(yintercept = 111.1)+
  labs (y = "Dust Yield (Kg)", x = "Unicorn No") +
  scale_y_continuous(limits = c(0, 200)) +
  scale_x_continuous(breaks = c(0, 2, 4, 6, 8, 10)) + 
  theme_classic ()


 


```

## Deviations from the mean .{unnumbered}

```{r}
#| eval: true

unicorns |> 
  filter(Radio == "NoRadio") |> 
  mutate(Diff = DustYield-111.1)

unicorns |> 
  filter(Radio == "NoRadio") |> 
  mutate(Diff = DustYield-111.1) |> 
  summarise(`Sum of Differences` = sum(Diff))



```

## Variance .{unnumbered}

```{r}
#: eval: true


unicorns |> 
  group_by(Radio) |> 
  summarise (Variance = var(DustYield))

```


# Lecture 2: Choosing a Statistical Test {.unnumbered}

```{r}
#| eval: TRUE


library(tidyverse)

cows <- readxl::read_excel("cows.xlsx") |> 
  mutate(parlour = as.factor(parlour),
         `housing type` = as.factor(`housing type`))


cows |> 
  ggplot(aes(x = `Welfare Score`, y= `Average Daily Yield`, colour = `housing type`)) +
  geom_point() +
  theme_classic() +
  labs(x  = "Welfare Score", y = "Average Daily Yield",
       title = "Milk Yield versus Welfare Score",
       subtitle = "For Robotic vs Manual Parlours") +
  facet_wrap(facets = ~parlour, ncol = 1) +
  theme(legend.position = "bottom")

```

## Numerical Response {.unnumbered}

```{r}
#| eval: true
cows |> 
  summarise(mean_yield = mean(`Average Daily Yield`),
            sd_yield = sd(`Average Daily Yield`))


t.test(cows$`Average Daily Yield`, mu = 28)

```


## Numerical Response Categorical Explanatory{.unnumbered}

```{r}
#| eval: true



diet <- tibble (before = c(5.04, 4.63, 4.04, 5.10, 5.43, 4.83, 3.45, 3.49, 5.02, 4.81),
                after = c( 4.78, 2.49, 4.46, 2.03, 5.13, 7.23, 3.50, 1.89, 3.30, 3.91))


diet |> 
  ggplot(aes(y = before)) +
  geom_boxplot() +
  geom_boxplot(aes(y = after, x =1)) +
  theme_classic() +
  scale_x_continuous(labels =c("Before Diet", "After Diet"), breaks = c(0,1)) +
  labs(x = "Diet", y = "Weight (kg)")



diet |> 
  summarise(before_mean = mean(before),
            after_mean = mean(after),
            before_sd = sd(before),
            after_sd = sd(after))


t.test(diet$before, diet$after, paired = TRUE, alternative = "two.sided")

```

2-Way ANOVA
```{r}
#| eval: true



model1 <-  aov(`Average Daily Yield` ~ parlour +  `housing type`, data = cows)
summary(model1)

```

Linear model

```{r}
#| eval: true

model2 <- lm(`Average Daily Yield` ~ parlour +  `housing type`, data = cows)
summary(model2)

```


## Numerical Response Numerical Explanatory {.unnumbered}

Correlation
```{r}
#| eval: true
cor.test(cows$`Average Daily Yield`, cows$`Welfare Score`)


```

Linear Model

```{r}
#| eval: true


```

Genearlised Linear Model

```{r}

#| eval: true


model4 <- glm(`Average Daily Yield` ~ `Welfare Score` 
              + `housing type` + parlour, data = cows)
summary(model4)


```
## Categorical Response {.unnumbered}


Proportion Test
```{r}
#| eval: true

prop.test(x = 3, n = 20, p = 0.18, alternative = "two.sided")


```



## Categorical Response Categorical Explanatory{.unnumbered}

McNemar's Test

```{r}
#| eval: true

work <- matrix(c(2, 5, 38, 35), 
               ncol=2, 
               byrow=TRUE,
               dimnames = list(c("Dysplasia", "No Dysplasia"),
                               c("Before Work Season", "After Work Season")))


mcnemar.test(work)


```


Fisher's Exact Test

```{r}
#| eval: true

fisher.test(x = c(4,16), y = c(2,18))

# Calculate Odds Ratio
(4+18) / (16 + 2)

```


Chi2 Test

```{r}
#| eval: true
gsd <- matrix(c(16, 12, 84, 86), 
              ncol=2, 
              byrow=TRUE,
              dimnames = list(c("Dysplasia", "No Dysplasia"),
                              c("Inbred", "Less Inbred")))


chisq.test(gsd)

library(vcd)
assocstats(gsd)


```

## Categorical Response Numerical Explanatory {.unnumbered}

Logistic Regression


```{r}
#| eval: true



dysp <- tibble(dysplasia = c(1, 1, 1, 1, 1, 1, 1,
                             0, 0, 0, 0, 0, 0, 0,
                             0, 0, 0, 0, 0, 0, 0),
               inflammation =c(0.91, 0.79, 1.40, 0.71, 1.01, 0.77, 0.85,
                               0.42, 1.02, 0.31, 0.05, 1.17, 0.04, 0.36, 
                               0.12, 0.02, 0.05, 0.42, 0.92, 0.72,  1.05)) 

logit <- glm(dysplasia ~ inflammation, data = dysp, family = "binomial")
summary(logit)

library(easystats)
report(logit)
parameters(logit)
exp(cbind(OddsRatio = coef(logit), confint(logit)))

```

## Parametric vs Non Parametric {.unnumbered}

## Power Calculations {.unnumbered}

## Assumptions {.unnumbered}

Residuals

```{r}
#| eval: false



residuals <- tibble(resids = resid(model4))

residuals |> 
  ggplot(aes(x = resids)) +
  geom_density()+
  theme_classic()


parameters::describe_distribution(residuals)

```